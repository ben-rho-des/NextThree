{"ast":null,"code":"var _jsxFileName = \"/home/t3hk/development/NextThree/components/blob/blob.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Suspense, useEffect, useMemo, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\nimport * as meshline from 'threejs-meshline';\nimport { Canvas, useFrame, useLoader, useThree, useUpdate } from 'react-three-fiber';\nimport CameraControls from './controls';\nimport { fragmentShader, vertexShader, pointVertexShader, pointFragmentShader } from './vertexShader'; // import { useSpring, animated } from '@react-spring/three'\n\nconst start = Date.now();\n\nconst LeBlob = props => {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n  const shader = useRef();\n  const pointShader = useRef();\n  const {\n    includePoints = false,\n    rotateSpeed = 0.09,\n    speed = 0.4,\n    size = 0.5,\n    decay = .20,\n    displace = 0.40,\n    complex = 0.45,\n    waves = 13,\n    eqcolor = 30.0,\n    rcolor = 1,\n    gcolor = 90,\n    bcolor = 30\n  } = props; // const [eventStream, setEvent] = useState(props.event);\n\n  const eventStream = props.event; // const [texture1] = useLoader(THREE.TextureLoader, ['./static/kitten.jpg'])\n\n  const options = // useMemo(\n  //     () => (\n  {\n    speed,\n    size,\n    pointscale: .0,\n    decay,\n    displace,\n    complex,\n    waves,\n    eqcolor,\n    rcolor,\n    gcolor,\n    bcolor,\n    rotateSpeed\n  }; //     ),\n  //     []\n  // );\n\n  const uniforms = useMemo(() => ({\n    time: {\n      type: \"f\",\n      value: options.speed / 1000 * start\n    },\n    pointscale: {\n      type: \"f\",\n      value: options.pointscale\n    },\n    decay: {\n      type: \"f\",\n      value: options.decay\n    },\n    size: {\n      type: \"f\",\n      value: options.size\n    },\n    displace: {\n      type: \"f\",\n      value: options.displace\n    },\n    complex: {\n      type: \"f\",\n      value: options.complex\n    },\n    waves: {\n      type: \"f\",\n      value: options.waves\n    },\n    eqcolor: {\n      type: \"f\",\n      value: options.eqcolor\n    },\n    rcolor: {\n      type: \"f\",\n      value: options.rcolor\n    },\n    gcolor: {\n      type: \"f\",\n      value: options.gcolor\n    },\n    bcolor: {\n      type: \"f\",\n      value: options.bcolor\n    }\n  }), []);\n  const {\n    0: active,\n    1: setActive\n  } = useState(false); // Rotate mesh every frame, this is outside of React without overhead\n\n  useFrame(() => {\n    // mesh.current.rotation.x = mesh.current.rotation.y += options.rotateSpeed;\n    shader.current.uniforms.time.value = options.speed / 1000 * (Date.now() - start);\n\n    if (includePoints) {\n      pointShader.current.uniforms.time.value = options.speed / 1000 * (Date.now() - start);\n    } // if (active) {\n    //   shader.current.uniforms.complex.value = 10;\n    //   shader.current.uniforms.eqcolor.value = 2;\n    // } else {\n    //   shader.current.uniforms.complex.value = options.complex\n    //   shader.current.uniforms.eqcolor.value = options.eqcolor\n    // }\n    // mesh.current.material.uniforms.waves.value = mesh.current.material.uniforms.waves.value + 0.01;\n    // mesh.current.material.uniforms.bcolor.value = mesh.current.material.uniforms.bcolor.value + 0.01;\n    // mesh.current.material.uniforms.eqcolor.value = mesh.current.material.uniforms.eqcolor.value + 0.01;\n    // mesh.current.material.uniforms.complex.value = mesh.current.material.uniforms.complex.value + 0.01;\n    // mesh.current.material.uniforms.decay.value = mesh.current.material.uniforms.decay.value + 0.01;\n\n\n    if (eventStream !== null) {\n      console.log(\"mesh.current.material.uniforms\", mesh.current.material.uniforms);\n      const ev = eventStream.split(\"-\");\n\n      if (ev[2] === \"ACTIVE\") {\n        if (ev[0] === \"ROTATE\") {\n          const coord = ev[1].toLowerCase();\n          mesh.current.rotation[coord] = mesh.current.rotation[coord] += options.rotateSpeed;\n        }\n\n        if (ev[0] === \"SCALE\") {\n          console.log(\"SCALE !!!\", mesh.current);\n          const direction = ev[1].toLowerCase();\n          const modifier = direction === \"up\" ? 0.01 : -0.01;\n          const curScale = mesh.current.scale.x;\n          const nextScale = curScale + modifier;\n          const cappedNextScale = nextScale < 0.3 ? 0.3 : nextScale > 1.8 ? 1.8 : nextScale;\n          mesh.current.scale.x = cappedNextScale;\n          mesh.current.scale.y = cappedNextScale;\n          mesh.current.scale.z = cappedNextScale;\n        }\n      }\n    }\n  });\n  return __jsx(\"group\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }\n  }, includePoints && __jsx(\"points\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }, __jsx(\"icosahedronBufferGeometry\", {\n    attach: \"geometry\",\n    args: [16, 6],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }\n  }), __jsx(\"shaderMaterial\", {\n    ref: pointShader,\n    attach: \"material\",\n    uniforms: uniforms,\n    fragmentShader: pointFragmentShader,\n    vertexShader: vertexShader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  })), __jsx(\"mesh\", _extends({\n    // onClick={e => setActive(!active)}\n    ref: mesh // position={mesh.current.waves[0, 0, 10]}\n\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }), __jsx(\"icosahedronBufferGeometry\", {\n    attach: \"geometry\",\n    args: [2, 6],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }), __jsx(\"shaderMaterial\", {\n    ref: shader,\n    attach: \"material\",\n    side: THREE.DoubleSide,\n    uniforms: uniforms,\n    fragmentShader: fragmentShader,\n    vertexShader: vertexShader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport const Blob = ({\n  event\n}) => {\n  const theme = useMemo(() => ({\n    bgGradFrom: '#E0E5EC',\n    bgGradTo: '#FFFFFF'\n  }), []);\n\n  function Camera(props) {\n    const ref = useRef();\n    const {\n      size,\n      setDefaultCamera\n    } = useThree(); // Make the camera known to the system\n\n    useEffect(() => void setDefaultCamera(ref.current), []); // Update it every frame\n    // useFrame(() => ref.current.updateMatrixWorld());\n\n    return __jsx(\"perspectiveCamera\", _extends({\n      ref: ref,\n      fov: \"35\",\n      aspect: size.width / size.height // radius={(size.width + size.height) / 4}\n      ,\n      near: 1,\n      far: 1000 // onUpdate={self => self.updateProjectionMatrix()}\n      ,\n      position: [0, 0, 26]\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 14\n      }\n    }));\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Canvas, {\n    shadowMap: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }\n  }, __jsx(Camera, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }), __jsx(Suspense, {\n    fallback: null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }\n  }, __jsx(LeBlob, {\n    includePoints: false // rotateSpeed={0.09}\n    // position={[0,0,10]}\n    ,\n    size: 0.3,\n    rcolor: 0,\n    gcolor: 1.2,\n    bcolor: 0.3,\n    decay: .3,\n    complex: 0.3,\n    displace: 1.3,\n    waves: 8,\n    eqcolor: 5,\n    event: event,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 23\n    }\n  })), __jsx(CameraControls, {\n    autoRotate: true,\n    enablePan: false,\n    enableZoom: false,\n    enableDamping: true,\n    dampingFactor: 0.5,\n    rotateSpeed: 1,\n    maxPolarAngle: Math.PI / 2,\n    minPolarAngle: Math.PI / 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }\n  })));\n};","map":{"version":3,"sources":["/home/t3hk/development/NextThree/components/blob/blob.js"],"names":["React","Suspense","useEffect","useMemo","useRef","useState","styled","THREE","meshline","Canvas","useFrame","useLoader","useThree","useUpdate","CameraControls","fragmentShader","vertexShader","pointVertexShader","pointFragmentShader","start","Date","now","LeBlob","props","mesh","shader","pointShader","includePoints","rotateSpeed","speed","size","decay","displace","complex","waves","eqcolor","rcolor","gcolor","bcolor","eventStream","event","options","pointscale","uniforms","time","type","value","active","setActive","current","console","log","material","ev","split","coord","toLowerCase","rotation","direction","modifier","curScale","scale","x","nextScale","cappedNextScale","y","z","DoubleSide","Blob","theme","bgGradFrom","bgGradTo","Camera","ref","setDefaultCamera","width","height","Math","PI"],"mappings":"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","sourcesContent":["import React, { Suspense, useEffect, useMemo, useRef, useState } from 'react';\nimport styled from 'styled-components'\nimport * as THREE from 'three';\nimport * as meshline from 'threejs-meshline';\nimport { Canvas, useFrame, useLoader, useThree, useUpdate } from 'react-three-fiber';\n\nimport CameraControls from './controls'\nimport { fragmentShader, vertexShader, pointVertexShader, pointFragmentShader } from './vertexShader';\n\n// import { useSpring, animated } from '@react-spring/three'\n\nconst start = Date.now();\n\nconst LeBlob = ( props ) => {\n    // This reference will give us direct access to the mesh\n    const mesh = useRef()\n    const shader = useRef()\n    const pointShader = useRef()\n\n    const {\n        includePoints = false,\n        rotateSpeed = 0.09,\n        speed= 0.4,\n        size= 0.5,\n        decay= .20,\n        displace= 0.40,\n        complex= 0.45,\n        waves= 13,\n        eqcolor= 30.0,\n        rcolor= 1,\n        gcolor= 90,\n        bcolor= 30,\n    } = props;\n\n    // const [eventStream, setEvent] = useState(props.event);\n    const eventStream = props.event\n    // const [texture1] = useLoader(THREE.TextureLoader, ['./static/kitten.jpg'])\n  \n    const options = \n    // useMemo(\n    //     () => (\n          {\n            speed,\n            size,\n            pointscale: .0,\n            decay,\n            displace,\n            complex,\n            waves,\n            eqcolor,\n            rcolor,\n            gcolor,\n            bcolor,\n            rotateSpeed\n        }\n    //     ),\n    //     []\n    // );\n\n    const uniforms = useMemo(\n      () => ({\n          time: {\n            type: \"f\",\n            value: (options.speed / 1000) * (start)\n          },\n          pointscale: {\n            type: \"f\",\n            value: options.pointscale\n          },\n          decay: {\n            type: \"f\",\n            value: options.decay\n          },\n          size: {\n            type: \"f\",\n            value: options.size\n          },\n          displace: {\n            type: \"f\",\n            value: options.displace\n          },\n          complex: {\n            type: \"f\",\n            value: options.complex\n          },\n          waves: {\n            type: \"f\",\n            value: options.waves\n          },\n          eqcolor: {\n            type: \"f\",\n            value: options.eqcolor\n          },\n          rcolor: {\n            type: \"f\",\n            value: options.rcolor\n          },\n          gcolor: {\n            type: \"f\",\n            value: options.gcolor\n          },\n          bcolor: {\n            type: \"f\",\n            value: options.bcolor\n          }\n      }),\n      []\n    );\n\n    const [active, setActive] = useState(false);\n\n    // Rotate mesh every frame, this is outside of React without overhead\n    useFrame(() => {\n        // mesh.current.rotation.x = mesh.current.rotation.y += options.rotateSpeed;\n        shader.current.uniforms.time.value = (options.speed / 1000) * (Date.now() - start);\n        if (includePoints) {\n            pointShader.current.uniforms.time.value = (options.speed / 1000) * (Date.now() - start);\n        }\n \n        // if (active) {\n        //   shader.current.uniforms.complex.value = 10;\n        //   shader.current.uniforms.eqcolor.value = 2;\n        // } else {\n        //   shader.current.uniforms.complex.value = options.complex\n        //   shader.current.uniforms.eqcolor.value = options.eqcolor\n        // }\n\n        // mesh.current.material.uniforms.waves.value = mesh.current.material.uniforms.waves.value + 0.01;\n        // mesh.current.material.uniforms.bcolor.value = mesh.current.material.uniforms.bcolor.value + 0.01;\n        // mesh.current.material.uniforms.eqcolor.value = mesh.current.material.uniforms.eqcolor.value + 0.01;\n        // mesh.current.material.uniforms.complex.value = mesh.current.material.uniforms.complex.value + 0.01;\n        // mesh.current.material.uniforms.decay.value = mesh.current.material.uniforms.decay.value + 0.01;\n        \n        if (eventStream !== null) {\n          console.log(\"mesh.current.material.uniforms\", mesh.current.material.uniforms)\n          const ev = eventStream.split(\"-\");\n          if (ev[2] === \"ACTIVE\") {\n            if (ev[0] === \"ROTATE\") {\n              const coord = ev[1].toLowerCase();\n              mesh.current.rotation[coord] = mesh.current.rotation[coord] += options.rotateSpeed;\n            }\n\n            if (ev[0] === \"SCALE\") {\n              console.log(\"SCALE !!!\", mesh.current)\n              const direction = ev[1].toLowerCase();\n              const modifier = direction === \"up\" ? 0.01 : -0.01;\n              const curScale = mesh.current.scale.x;\n\n              const nextScale = curScale + modifier;\n\n              const cappedNextScale = nextScale < 0.3 ? 0.3 : (nextScale > 1.8 ? 1.8 : nextScale);\n              \n              mesh.current.scale.x = cappedNextScale;\n              mesh.current.scale.y = cappedNextScale;\n              mesh.current.scale.z = cappedNextScale;\n            }\n          }\n        }\n    })\n\n    return (\n    <group>\n        {includePoints && (\n            <points>\n                <icosahedronBufferGeometry attach=\"geometry\" args={[16, 6]} />\n                <shaderMaterial ref={pointShader} attach=\"material\" uniforms={uniforms} fragmentShader={pointFragmentShader} vertexShader={vertexShader} />\n            </points>\n        )}\n        <mesh \n              // onClick={e => setActive(!active)}\n              ref={mesh}\n              // position={mesh.current.waves[0, 0, 10]}\n              {...props}\n            >\n            <icosahedronBufferGeometry  attach=\"geometry\" args={[2, 6]} />\n            <shaderMaterial ref={shader} attach=\"material\" side={THREE.DoubleSide} uniforms={uniforms} fragmentShader={fragmentShader} vertexShader={vertexShader} />\n        </mesh>\n    </group>\n    )\n}\n\nexport const Blob = ({event}) => {\n    const theme = useMemo(\n        () => ({\n            bgGradFrom: '#E0E5EC',\n            bgGradTo: '#FFFFFF',\n        }),\n        []\n    );\n\n    function Camera(props) {\n      const ref = useRef()\n      const { size, setDefaultCamera } = useThree();\n      \n      // Make the camera known to the system\n      useEffect(() => void setDefaultCamera(ref.current), [])\n      // Update it every frame\n      // useFrame(() => ref.current.updateMatrixWorld());\n\n      return <perspectiveCamera ref={ref}\n          fov=\"35\"\n          aspect={size.width / size.height}\n          // radius={(size.width + size.height) / 4}\n          near={1}\n          far={1000} \n          // onUpdate={self => self.updateProjectionMatrix()}\n          position={[0, 0, 26]} \n          {...props}\n          />\n    }\n\n    return (\n      <>\n        <Canvas shadowMap>\n            <Camera />\n            <Suspense fallback={null}>\n                {/* <LeBlob /> */}\n                {/* <LeBlob\n                    includePoints={false}\n                    rotateSpeed={0.09}\n                    // position={[0,0,10]}\n                    size={0.35}\n                    rcolor={10}\n                    gcolor={20}\n                    bcolor={60}\n                    /> */}\n                    {/* <LeBlob\n                      includePoints={false}\n                      // rotateSpeed={0.09}\n                      // position={[0,0,10]}\n                      size={0.3}\n                      rcolor={.45}\n                      gcolor={2}\n                      bcolor={.8}\n                      decay={.3}\n                      complex={0.3}\n                      displace={1.3}\n                      waves={8}\n                      eqcolor={11}\n                      /> */}\n                      <LeBlob\n                        includePoints={false}\n                        // rotateSpeed={0.09}\n                        // position={[0,0,10]}\n                        size={0.3}\n                        rcolor={0}\n                        gcolor={1.2}\n                        bcolor={0.3}\n                        decay={.3}\n                        complex={0.3}\n                        displace={1.3}\n                        waves={8}\n                        eqcolor={5}\n\n                        event={event}\n                      />\n                  {/* <LeBlob\n                    includePoints={false}\n                    // rotateSpeed={0.09}\n                    // position={[0,0,10]}\n                    size={0.35}\n                    rcolor={10}\n                    gcolor={20}\n                    bcolor={60}\n                    decay={4}\n                    speed={0.1}\n                    /> */}\n            </Suspense>\n\n            <CameraControls\n                autoRotate\n                enablePan={false}\n                enableZoom={false}\n                enableDamping\n                dampingFactor={0.5}\n                rotateSpeed={1}\n                maxPolarAngle={Math.PI / 2}\n                minPolarAngle={Math.PI / 2}\n            />\n        </Canvas>\n      </>\n    );\n}"]},"metadata":{},"sourceType":"module"}